diff --git a/after/plugin/cmp_luasnip.lua b/after/plugin/cmp_luasnip.lua
index 0ddc5b6..9d8ba16 100644
--- a/after/plugin/cmp_luasnip.lua
+++ b/after/plugin/cmp_luasnip.lua
@@ -1,3 +1,6 @@
+local log = require("mc.util.vlog")
+log.info("reg cmp source",debug.traceback())
+
 require("cmp").register_source("luasnip", require("cmp_luasnip").new())
 
 local cmp_luasnip = vim.api.nvim_create_augroup("cmp_luasnip", {})
diff --git a/lua/cmp_luasnip/init.lua b/lua/cmp_luasnip/init.lua
index 5117708..003f660 100644
--- a/lua/cmp_luasnip/init.lua
+++ b/lua/cmp_luasnip/init.lua
@@ -1,5 +1,6 @@
 local cmp = require("cmp")
 local util = require("vim.lsp.util")
+local log = require("mc.util.vlog")
 
 local source = {}
 
@@ -75,7 +76,7 @@ function source:complete(params, callback)
 			local ft_table = require("luasnip").get_snippets(ft, {type = "snippets"})
 			local iter_tab
 			if params.option.show_autosnippets then
-				local auto_table = require('luasnip').get_snippets(ft, {type="autosnippets"})
+				local auto_table = require('luasnip').get_snippets(ft, { type = "autosnippets" })
 				iter_tab = {{ft_table, false}, {auto_table, true}}
 			else
 				iter_tab = {{ft_table, false}}
@@ -110,12 +111,13 @@ function source:complete(params, callback)
 			return not i.data.show_condition or i.data.show_condition(line_to_cursor)
 		end, items)
 	end
-
+	log.info("cmp-luasnip items", items)
 	callback(items)
 end
 
 function source:resolve(completion_item, callback)
 	local item_snip_id = completion_item.data.snip_id
+	log.info("cmp-luasnip resolve it", item_snip_id)
 	local snip = require("luasnip").get_id_snippet(item_snip_id)
 	local doc_itm = doc_cache[completion_item.data.filetype] or {}
 	doc_itm = doc_itm[completion_item.data.snip_id] or get_documentation(snip, completion_item.data)
@@ -127,8 +129,10 @@ function source:resolve(completion_item, callback)
 end
 
 function source:execute(completion_item, callback)
+	log.info("cmp-luasnip execute it", completion_item.data.snip_id)
 	local snip = require("luasnip").get_id_snippet(completion_item.data.snip_id)
 
+	local line = require("luasnip.util.util").get_current_line_to_cursor()
 	-- if trigger is a pattern, expand "pattern" instead of actual snippet.
 	if snip.regTrig then
 		snip = snip:get_pattern_expand_helper()
@@ -138,18 +142,45 @@ function source:execute(completion_item, callback)
 	-- get_cursor returns (1,0)-indexed position, clear_region expects (0,0)-indexed.
 	cursor[1] = cursor[1] - 1
 
+
+	local expand_params = snip:matches(line)
+	log.info("cmp-luasnip execute it call snip", completion_item.word, expand_params)
+
+	local clear_region = {
+		from = {
+			cursor[1],
+			cursor[2] - #completion_item.word
+		},
+		to = cursor
+	}
+	if expand_params ~= nil then
+		if expand_params.clear_region ~= nil then
+			log.info("cr from exp cr")
+			clear_region = expand_params.clear_region
+		else
+			log.info("cr from exp trigger")
+			if expand_params.trigger ~= nil then
+				clear_region = {
+					from = {
+						cursor[1],
+						cursor[2] - #expand_params.trigger,
+					},
+					to = cursor,
+				}
+			end
+		end
+	end
+	local cr = clear_region
+	log.info("cmp-luasnip expand", expand_params)
+	log.info("clear ", cr)
+	log.info("clear ", cr, vim.api.nvim_buf_get_text(0, cr.from[1], cr.from[2], cr.to[1], cr.to[2], {}))
 	-- text cannot be cleared before, as TM_CURRENT_LINE and
 	-- TM_CURRENT_WORD couldn't be set correctly.
 	require("luasnip").snip_expand(snip, {
 		-- clear word inserted into buffer by cmp.
 		-- cursor is currently behind word.
-		clear_region = {
-			from = {
-				cursor[1],
-				cursor[2]-#completion_item.word
-			},
-			to = cursor
-		}
+		clear_region = clear_region,
+		expand_params = expand_params,
 	})
 	callback(completion_item)
 end
